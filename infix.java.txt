import java.util.*;


class InfixtoPost {
    // A utility function to return precedence of a given operator
    // Higher returned value means higher precedence
    String postFix;
    public InfixtoPost(String exp)
    {
        postFix=infixToPostfix(exp);
    }
    static int Prec(char ch) {
        switch (ch) {
            case '+':
            case '-':
                return 1;

            case '*':
            case '/':
                return 2;

            case '^':
                return 3;
        }
        return -1;
    }

    // The main method that converts given infix expression
    // to postfix expression.
    static String infixToPostfix(String exp) {
        // initializing empty String for result
        String result = new String("");

        // initializing empty stack
        Stack<Character> stack = new Stack<>();

        for (int i = 0; i < exp.length(); ++i) {
            char c = exp.charAt(i);

            // If the scanned character is an operand, add it to output.
            if (Character.isLetterOrDigit(c))
                result += c;

                // If the scanned character is an '(', push it to the stack.
            else if (c == '(')
                stack.push(c);

                //  If the scanned character is an ')', pop and output from the stack
                // until an '(' is encountered.
            else if (c == ')') {
                while (!stack.isEmpty() && stack.peek() != '(')
                    result += stack.pop();

                if (!stack.isEmpty() && stack.peek() != '(')
                    return "Invalid Expression"; // invalid expression
                else
                    stack.pop();
            }
            else // an operator is encountered
            {
                while (!stack.isEmpty() && Prec(c) <= Prec(stack.peek()))
                    result += stack.pop();
                stack.push(c);
            }

        }

        // pop all the operators from the stack
        while (!stack.isEmpty())
            result += stack.pop();

        return result;
    }
}



public class ICG {
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter expression:(Arithmetic Expression)");
        String inp=sc.nextLine();
        InfixtoPost ip=new InfixtoPost(inp);
        Stack<String> stack=new Stack<String>();
        String tmp=ip.postFix;
        String result="";
        int j=0;
        for(int i=0;i<tmp.length();i++)
        {
            if(tmp.charAt(i)=='+' || tmp.charAt(i)=='-' || tmp.charAt(i)=='*' || tmp.charAt(i)=='/' || tmp.charAt(i)=='^')
            {
                String b,a;
                b=stack.pop();
                a=stack.pop();
                result+="t"+j+"= "+a+" "+tmp.charAt(i)+" "+b+"\n";
                stack.push("t"+(j++));
            }
            else
            {
                stack.push(tmp.charAt(i)+"");
            }
        }
        System.out.println(result);
    }
}